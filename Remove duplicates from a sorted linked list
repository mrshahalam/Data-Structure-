package test;

import java.util.HashSet;

// Iterative Java program to search an element 
// in linked list 
//Node class 
//Linked list class 
class demo 
{ 
	static Node head; //Head of list 
	static class Node 
	{ 
		int data; 
		Node next; 
		Node(int d) 
		{ 
			data = d; 
			next = null; 
		} 
	} 

	//Inserts a new node at the front of the list 
	public void push(int new_data) 
	{ 
		//Allocate new node and putting data 
		Node new_node = new Node(new_data); 

		//Make next of new node as head 
		new_node.next = head; 

		//Move the head to point to new Node 
		head = new_node; 
	} 
	
	public void dublicate()
	{
		Node current=head;
		
		
		while(current!=null && current.next!=null)
		{
			if(current.data==current.next.data)
			{
				current.next =current.next.next;
			}
			else
			{
				current=current.next;
			}
		}
		
	}
	
	public void print()
	{
		Node start = head;
		while(start!=null)
		{
			System.out.print(start.data+" ");
			start=start.next;
		}
	}

	//Driver function to test the above functions 
	public static void main(String args[]) 
	{ 

		//Start with the empty list 
		demo llist = new demo(); 

		/*Use push() to construct below list 
		14->21->11->30->10 */
		
		llist.push(15);
		llist.push(15);
		llist.push(14); 
		llist.push(14);
		llist.push(11); 
		llist.push(11); 
		llist.push(10); 
		llist.push(10); 
		
		llist.print();
		System.out.print("\nlist after removing dublicate \n");
		
		llist.dublicate();
		
		llist.print();
		
		
		
	} 
} 

