#include<stdio.h>   
#include<stdlib.h>  

struct node
{
	int data;
	struct node *next;
};
struct node *front=0;
struct node *rear=0;
void Enqueue();
void Dequeue();
void Display();
void main()
{
	int choice=0;
	printf("********************************** Queue Operation******************************************\n");
	printf("Which operation you want tot performe on the Queue \n");
	
	
	printf("1.inertion\n2.deletion\n3.display\n4.Exit\n");
	
	while(choice!=4)
	{
		printf("Enter your choice \n");
		scanf("%d",&choice);
			switch(choice)
			{
				case 1:
					Enqueue();
					break;
				case 2:
					Dequeue();
					break;
				case 3:
					Display();
					break;
				case 4:
					exit(0);
				default:
				    printf("You entered invalid option\n");	
			}	
	};
	
}
//---------------------------------------Enqueue-Operation-------------------------------------------------------
void Enqueue()
{
			int val;
			struct node *ptr;
			ptr=(struct  node*)malloc(sizeof(struct node*));
			
			if(ptr==NULL)
			{
				printf("nOVERFLOW \n");
				
			}
			else
			{
				printf("Enter the value of element \n");
				scanf("%d",&val);
				ptr->data=val;
				if(front==NULL)
				{
					front=ptr;
					rear=ptr;
					front->next=NULL;
					rear->next=NULL;
				}
				else
				{
					rear->next=ptr;        		// rear -> next = ptr;  
					ptr->next=NULL;       	 	// rear = ptr;  
					rear=ptr;              		// rear->next = NULL;  
				}
				printf("node in inserted \n");
				
			}
				
}
//------------------------------------------------Dequeue-Operation-----------------------------------------------
void Dequeue()
{
	struct node *ptr;
	if(front==NULL)
	{
		printf("Queue is Empty\n");
		return;
	}
	else
	{
		
		
			ptr=front;
			front=front->next;
			free(ptr);
	        printf("node is deleted successfully\n");
	}
}
void Display()
{
	struct node *ptr;
	            ptr=front;
				if(front==NULL)
				{
				 printf("No thong to show\n");	
				}	
				else
				{
					while(ptr!=NULL)
					{
						printf("%d\n",ptr->data);
						ptr=ptr->next;
					}
					
				}							
}


































